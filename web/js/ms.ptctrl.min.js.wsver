;(function($){
	$.ptctrl = function(expr, opt) {
		var view = $(expr);
		var set = {
			init:	false,	// 初始化状态
			dire:	'lr',	// 方向urdl
			icon:	['&#xe603;', '&#xe602;', '&#xe600;', '&#xe601;'],	// 按钮图标
			cmds:	{},	// 指令集
			log:	true,	// 开启日志
			socket:	false,	// ws对象
			aslogin:false,	// 登录状态
			hbn:	30000,	// 心跳间隔
			host:	'ws://172.18.33.6:8989/ws',	// 连接地址
			tokenid:'',	// 用户tokenid
		};
		$.extend(set, opt);
		
		var cbtn = false;

		// 输出消息到控制台
		function message(msg) {
			if(set.log) {
				console.log('PT Ctrl > '+ msg);
			}
		}
		
		// 显示控制按钮
		function showContral() {
			if(cbtn) {
				cbtn.css({opacity: 1});
			}
		}

		// 隐藏控制按钮
		function hideContral() {
			if(cbtn) {
				cbtn.css({opacity: 0});
			}
		}

		// 心跳保持
		var klsto = false;
		function keeplive(s) {
			if(klsto) {
				clearTimeout(klsto);
				klsto = false;
			}
			if(s) {
				klsto = setTimeout(function() {
					if(set.socket) {
						var req = {
							'type':		2,
							'length':	0,
							'token_id':	set.tokenid,
							'body':		0
						};
						message('Keep Live: '+ new Date().toUTCString());
						set.socket.send(JSON.stringify(req));
					}
				}, set.hbn);
			}
		}

		// 发送指令
		function send(cmd) {
			if(set.init && set.socket) {
				var req = {
					'type':		2,
					'length':	0,
					'token_id':	set.tokenid,
					'body':		cmd
				};
				var str = JSON.stringify(req);
				message('Socket Send: '+ str);
				set.socket.send(str);
				return true;
			}
			return false;
		}

		// 初始化
		function init() {
			try {
				set.socket = new WebSocket(set.host);
				message('Socket Status: ' + set.socket.readyState);

				set.socket.onopen = function() {
					message('Socket Status: ' + set.socket.readyState + ' (open)');
				};

				set.socket.onmessage = function(msg) {
					message('Received: ' + msg.data);
					var data = $.parseJSON(msg.data);
					if('object' == typeof(data)) {
						switch(data.type) {
							case 1:
								if(200 == data.code) {
									set.aslogin = true;
									set.hbn = data.heartbeat * 1000;
									set.init = true;
									keeplive(true);
									message('Access Server: Logged');
								}else {
									set.aslogin = false;
									set.keeplive(false);
									message('Access Server: Login Failed');
								}
								break;
							case 2:
								keeplive(true);
								break;
							default:
								console.log('Unknow');
						}
					}
				};

				set.socket.onclose = function() {
					message('Socket Status: ' + set.socket.readyState + ' (Closed)');
					set.init = false;
					set.aslogin = false;
					keeplive(false);
				};
			} catch(exception) {
				message('Error: ' + exception);
				return false;
			}

			if(!set.init) {
				message('Error: ACCSrv Connect Error');
				return false;
			}
			
			// 添加控制钮至视图
			cbtn = [];
			$.each(['u', 'r', 'd', 'l'], function(i, d) {
				if(-1 < set.dire.indexOf(d)) {
					cbtn.push('<button class="ptctrl btn'+ d.toUpperCase() +'">'+ set.icon[i] +'</button>');
				}
			});
			view.append(cbtn.join(''));
			cbtn = view.find('.ptctrl');
			
			setTimeout(showContral, 1000);

			// 事件绑定 - 鼠标移入移出事件
			var _invcont = false;
			view.mousemove(function() {
				showContral();
				if(_invcont) {
					clearTimeout(_invcont);
				}
				_invcont = setTimeout(hideContral, 5000);
			}).mousemove();

			// 按钮按下
			var _cbtnmd = false;
			cbtn.mousedown(function() {
				_cbtnmd = true;
				var t = $(this);
				send('test');
			}).mouseup(function() {
				_cbtnmd = false;
				send('close');
			}).mouseout(function() {
				if(_cbtnmd) {
					_cbtnmd = false;
					send('close');
				}
			});
		}
		
		// 定时检测 当播放器就绪时初始化控制组件
		var checkintv = false;
		checkintv = setInterval(function() {
			if(swfobj) {
				clearInterval(checkintv);
				init();
			}
		}, 500);

		return {
			get:	function(k) {
				return set[k];
			},
			send:	function(cmd) {
				send(cmd);
			},
			destroy: function() {
				if(set.init && set.socket) {
					set.socket.close();
				}
				if(cbtn) {
					cbtn.remove();
					cbtn = false;
				}
				message('PT Ctrl Destroyed');
			}
		};
	};
})(jQuery);