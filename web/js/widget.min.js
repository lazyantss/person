;(function($) {
	// 遮罩控件
	$.mask = function(hide, callback) {
		var tg = $('.fx_mask');
		if(hide) {
			tg.fadeOut(300, callback);
		}else {
			if(!tg.length) {
				tg = $('<div class="fx_mask"></div>').appendTo('body');
			}
			tg.stop().fadeIn(300, callback);
		}
	};

	$.fn.mask = function(hide, callback, type) {
		var t = $(this);
		var m = t.find('.fx_fnmask');
		if(hide) {
			m.fadeOut(300, callback);
			return;
		}
		if(!m.length) {
			m = $('<div class="fx_fnmask flexbox"><div class="css3loading" style="margin: 0 auto">'+
				 ('flip' == type?'<span class="flip"></span>'
				 :'load' == type?'<span class="load"></span><span class="load"></span><span class="load"></span>'
				 :'wave' == type?'<span class="wave"></span><span class="wave"></span><span class="wave"></span><span class="wave"></span><span class="wave"></span>'
				 :'<span class="spin"></span>')+
				 '</div></div>').appendTo(t);
		}
		m.stop().fadeIn(300, callback);
	};
	
	// 会话框控件
	$.dialog = function() {
		if(1 == arguments.length || (2 == arguments.length && 'function' == typeof(arguments[1]))) {
			$.mask(1);
			var callback = arguments[1];
			//$('.fx_dialog').fadeOut(300, arguments[1]);
			$('.fx_dialog').stop().transition({opacity: 0, rotateX: '90deg'}, 300, function() {
				$(this).hide();
				if('function' == typeof(callback)) {
					callback();
				}
			});
		}else {
			var _d = {
				id:		0,
				url:	0,
				cb:		function(){},
				view:	false,
				opt:	{
					css: {
						width:	'auto',
						height:	'auto'
					}
				},
				init:	function() {
					var tg = $('#'+ this.id);
					if(!tg.length) {
						tg = $('<div id="'+ this.id +'" class="fx_dialog"><div class="fx_content"></div><input type="button" value="╳" class="fx_close" /></div>').appendTo('body');
						this.view = tg;
						tg.find('.fx_close').click(function() {
							$.dialog(1);
						});
						if(this.url) {
							this.load();
						}
					}
					return this;
				},
				unload:	function() {
					this.hide()
					this.view.find('.fx_close').unbind();
					this.view.remove();
					return false;
				},
				resize:	function(st) {
					if('object' == typeof(st)) {
						var w = st.width, h = st.height;
						this.view.animate({width: w, height: h, marginLeft: -(w / 2), marginTop: -(h / 2)});
					}else if(true === st) {
						this.view.css({marginLeft: -(this.view.outerWidth() / 2), marginTop: -(this.view.outerHeight() / 2)});
					}else {
						this.view.stop().transition({marginLeft: -(this.view.outerWidth() / 2), marginTop: -(this.view.outerHeight() / 2)}, 300);
					}
				},
				show:	function(cb) {
					$.mask();
					this.view.removeAttr('style').css(this.opt.css);
					this.resize(true);
					this.view.stop().show().transition({opacity: 1, rotateX: '0deg'}, 300, function() {
						if('function' == typeof(cb)) {cb(_d);}
					});
				},
				hide:	function(cb) {
					$.mask(1);
					this.view.stop().transition({opacity: 0, rotateX: '90deg'}, 300, function() {
						this.hide();
						if('function' == typeof(cb)) {cb(_d);}
					});
				},
				load:	function() {
					if(this.url) {
						this.view.find('.fx_content').empty().load(this.url, function() {
							if('function' == typeof(_d.cb)) {_d.cb(_d);}
						});
					}
				}
			};
			
			_d.id	= arguments[0];
			_d.url= arguments[1];
			if(arguments[2] && 'object' == typeof(arguments[2])) {
				$.extend(_d.opt, arguments[2]);
			}else if(arguments[2] && 'function' == typeof(arguments[2])) {
				_d.cb = arguments[2];
			}else if(arguments[3] && 'function' == typeof(arguments[3])) {
				_d.cb = arguments[3];
			}
			
			return _d.init();
		}
	};

	// 波纹动画
	$.fn.ripple = function(c, s, cb, ofs) {
		var t = $(this);
		var c = c?$(c):t;
		var r = c.find('.fx_ripple');
		if(!r.length) {
			c.css({overFlow: 'hidden'});
			r = $('<span class="fx_ripple"></span>').prependTo(c);
			r.css({left: (ofs?ofs.left:t.position().left) + t.width() / 2, top: (ofs?ofs.top:t.position().top) + t.height() / 2});
		}
		if(!s) {
			r.css({boxShadow: 'none', opacity: 0.5});
		}else {
			r.css({boxShadow: '0 0 0 '+ (Math.max(c.width(), c.height())) +'px #99CCFF', opacity: 1, transition: 'all 1s', '-webkit-transition': 'all 1s', '-moz-transition': 'all 1s'});
		}
		if(cb && 'function' == typeof(cb)) {
			setTimeout(cb, 1000);
		}
	};

	// 气泡提示
	$.bubble = function(set, fn) {
		var opt = {
			tg:		false,
			type:	'e',
			text:	'?',
			show:	true,
			ofs: {
				x:	20,
				y:	5
			}
		};
		if('boolean' == typeof(set) && !set) {
			var tg = $('.fx_bubble');
			var ln = tg.length;
			$.each(tg, function(i, o) {
				setTimeout(function() {
					if(i == ln - 1) {
						$(o).transition({y: 3, opacity: 0.8}, 200).transition({y: -7, opacity: 0.5}, 200).transition({y: 10, opacity: 0}, 100, function() {
							tg.remove();
						});
					}else {
						$(o).transition({y: 3, opacity: 0.8}, 200).transition({y: -7, opacity: 0.5}, 200).transition({y: 10, opacity: 0}, 100);
					}
				}, i * 100);
			});
		}else {
			if('object' == typeof(set)) {
				$.extend(opt, set);
				var x = opt.ofs.x;
				var y = opt.ofs.y;
				if('string' == typeof(opt.tg) || 'object' == typeof(opt.tg)) {
					var v = 'string' == typeof(opt.tg)?$(opt.expr):opt.tg;
					x = v.offset().left + v.outerWidth() + opt.ofs.x;
					y = v.offset().top + opt.ofs.y;
				}
				$('body').append('<div class="fx_bubble '+ opt.type +'" style="left: '+ x +'px;top:'+ y +'px"><i></i>'+ opt.text +'</div>');
			}
			if('boolean' == typeof(set) || opt.show) {
				$.each($('.fx_bubble'), function(i, o) {
					setTimeout(function() {
						$(o).transition({y: -7, opacity: 0.5}, 200).transition({y: 3, opacity: 0.8}, 200).transition({y: 0, opacity: 1}, 100);
					}, i * 100);
				});
			}

			if('undefined' == typeof(_initbubble)) {
				_initbubble = true;
				$('body').click(function() {$.bubble(false);});
				$('input').focus(function() {$.bubble(false);});
			}
		}
	};
})(jQuery);